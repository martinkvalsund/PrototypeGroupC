{"docstore/metadata": {"9539df6d-69dc-40e0-8d32-d821a2fce683": {"doc_hash": "3a6788343cc39a613b69b5d0f4516d3e5ff92c815bc97eebec231d8390a269fd"}, "90c2cf7b-908b-4b41-8baf-5c7c284e44aa": {"doc_hash": "869ce6aa909e63b8f2c06b698c134d5e0484a284e7d04d704d0044eb9a450f49"}, "a3ef7c43-088f-4809-b474-504e2056afc4": {"doc_hash": "2175143c3881f615d5cc0713044506d5a07e674986b511ae4dac51740fa86a8d"}, "2a7dde48-519c-4ce0-bd42-dbc01d189315": {"doc_hash": "2afa8b173faa9c14a3371d8ee7b455be222621d9b3d4ed0f4e4a699c5acdee78"}, "c459dfbb-05d9-4bd2-9b93-9175236d87cd": {"doc_hash": "6a14bb4d076a3a76c04188db270545d923c96a6213b23b469195ddc7afa5b588"}, "d42e765c-9953-42d0-a05f-1ca6aac134aa": {"doc_hash": "73b962ba107f9a2367b549d632e00ecc2fa1749193a7042e73f686915ed3b06a"}, "ffdd34a6-32a1-4f1b-a616-7934e94fabc5": {"doc_hash": "a263a9dd4af4acfd8808b0f8980baf6356ff7874f577b6ba9c305aeae5501226"}, "49673bce-884e-4e81-b6cf-b8ebe98b8dea": {"doc_hash": "bb215111fdf68a3bc017afb6f7a6f060d545d4484cd56ee62fc21269155043e2"}, "d374da11-0da2-44d2-8085-eb17e9dbad26": {"doc_hash": "99dfdea058349d06e3abc8f2d74992c7a1de415ae6ca54cdacc939180e566ec1"}, "3f77a63f-7c98-4874-89e2-ffac60190ee1": {"doc_hash": "6a48cf76680f738332728c5447989182f2ace1ec3a06e25ab70f6676ba4af5a2"}, "155b3a0d-8a36-41b1-a44e-25f00d03e054": {"doc_hash": "18e6afd99c85f7deff764dd6549b9c54d5d4f033d65cc6ca98dc71e7e99e2caa"}, "d343b895-32da-401e-89a6-0d30e1f0af09": {"doc_hash": "15ce9a5f4758f1ccc58449f7c56ef303f3190fa6b0407bc2406923e87eb7e3b0"}, "e113910c-f9ff-42ae-98f9-d321ac79ffdb": {"doc_hash": "836fadd17068656b4803669242a611589c75184521be0606db4d49cae721d777"}, "3c0abe99-189d-445b-8fd4-1ec751bb9936": {"doc_hash": "d6f563190a8fa243a8fe20fc2b2cbff7dffc4508327b1f3a00104d5d3f3a57e7"}, "babed95f-2ea7-450a-bd0a-d6886146902e": {"doc_hash": "a67b35e8f6d6df2afdc155401b38da86e1aa730ab0aeb5b03f671e7c4bbb2167"}, "861c2cf9-d899-42f6-8e16-9430fae8e912": {"doc_hash": "94a144066063ca2018e6722476ff80e5b19cae55e2ce596a01b819f47ba8e136"}, "66940b6f-e079-4d27-8138-4e14c4571c31": {"doc_hash": "9b1aeb59f41c8d176c8eb1d3f317a3cb0b72842ed5b3b33f9f0f31b9000fafe1"}, "4c79f2d6-08e2-4423-973c-b8276de45d4e": {"doc_hash": "1b395c1e21257d3f8f8cfbb221583a9bd05cbd5377ebe18f2157a0f946384751", "ref_doc_id": "9539df6d-69dc-40e0-8d32-d821a2fce683"}, "11759c97-e535-4807-8ab6-da70932d32b4": {"doc_hash": "69feb2cbe4d35d5c8f540146df505072ee73f0cd3a84267e1a54b91b6d9345aa", "ref_doc_id": "90c2cf7b-908b-4b41-8baf-5c7c284e44aa"}, "1fc21395-d9c8-4334-99a3-df05c1621ef3": {"doc_hash": "b19915789d7e1fa9429bdb4569fffaa28165685e423e2f471603b0fbf3a04db5", "ref_doc_id": "a3ef7c43-088f-4809-b474-504e2056afc4"}, "1d53449b-1c9c-439a-a822-f03aec788fd0": {"doc_hash": "cecb859fe3afe73239f267483879d4fae914c92a6115c6f1a58aa3eb7b65b6e9", "ref_doc_id": "2a7dde48-519c-4ce0-bd42-dbc01d189315"}, "f363d4db-5c51-4614-9500-0b2fe4bcba20": {"doc_hash": "2395e8e74b710dcbb4d4c7ce76f580e46cd608c545f3c79987f0434050a142f1", "ref_doc_id": "c459dfbb-05d9-4bd2-9b93-9175236d87cd"}, "90f395f5-3786-4c72-adba-96f228badd8d": {"doc_hash": "4df9d5fe0eab3fa15d595f4d3b0482f2338913526300e5c5ef2e86c9a8278d1a", "ref_doc_id": "d42e765c-9953-42d0-a05f-1ca6aac134aa"}, "d982c433-731b-4831-9f27-48d312bfdf48": {"doc_hash": "ae8c56cb75186981ae3d78fb5c3bc62be1952c3ec81b969c6f72921b5db66307", "ref_doc_id": "d42e765c-9953-42d0-a05f-1ca6aac134aa"}, "fe2ea077-cbfc-4604-926e-bd3f7c13ed3b": {"doc_hash": "780ecb90fa8eca3451adb366bcfe401590591a7e094e49d633f6dba1c47c915e", "ref_doc_id": "ffdd34a6-32a1-4f1b-a616-7934e94fabc5"}, "433d702b-97d7-4e19-bc0f-f99978e8a894": {"doc_hash": "8e358efc2100ff3350ddb26ed30d470a6f1ad4f1aec510c14cb2508383283cce", "ref_doc_id": "49673bce-884e-4e81-b6cf-b8ebe98b8dea"}, "7a4c9fdc-6958-4510-b94d-3eff9c102baf": {"doc_hash": "3af7b6e9a246594b52e2e1bc1f19271e64f7efd30391f8b4ed998fbea28c0452", "ref_doc_id": "49673bce-884e-4e81-b6cf-b8ebe98b8dea"}, "4246b198-dbce-4f3b-83df-97bec98d3035": {"doc_hash": "b737e339f2889edf317a974f320484250630ba77c515724956a78371454f2bda", "ref_doc_id": "d374da11-0da2-44d2-8085-eb17e9dbad26"}, "145bcca7-c729-4248-bc01-3104d8b83c2d": {"doc_hash": "4e7c9571ec133795a6405272cb3eb8da3dce4ad3d37d12fba012949cf0289e6b", "ref_doc_id": "3f77a63f-7c98-4874-89e2-ffac60190ee1"}, "61ffa5cc-da53-40a4-b368-b53405304947": {"doc_hash": "18e6afd99c85f7deff764dd6549b9c54d5d4f033d65cc6ca98dc71e7e99e2caa", "ref_doc_id": "155b3a0d-8a36-41b1-a44e-25f00d03e054"}, "a0496fd0-48e4-4ec6-a8ae-a1c95ce680a0": {"doc_hash": "15ce9a5f4758f1ccc58449f7c56ef303f3190fa6b0407bc2406923e87eb7e3b0", "ref_doc_id": "d343b895-32da-401e-89a6-0d30e1f0af09"}, "98945ea1-8cbe-4ced-b962-f28df1fb5edf": {"doc_hash": "446b2826313ceebbf1f5af04076474ee05a9b23b6044cd3b1994ff7a94950572", "ref_doc_id": "e113910c-f9ff-42ae-98f9-d321ac79ffdb"}, "a30783d1-ac75-476a-bfd8-359b9afcc263": {"doc_hash": "2f34c9e1c5a03b29480341fd608306976cd1b68c47b5db24f5c948ba2e1d734d", "ref_doc_id": "3c0abe99-189d-445b-8fd4-1ec751bb9936"}, "5edfa158-14bd-4f9f-942f-d1c6d17f1515": {"doc_hash": "17533bf302c7203c8103892819bbb93e8d2d8da84baec64de1b8c8b6c957d09d", "ref_doc_id": "babed95f-2ea7-450a-bd0a-d6886146902e"}, "802f4e3a-9389-4f1a-8f7c-ee1a89fc86c2": {"doc_hash": "32608190aa0773fd2bbc63aa059a1be228d0e1ef7f64e7a5c2fcf165b2f715f0", "ref_doc_id": "861c2cf9-d899-42f6-8e16-9430fae8e912"}, "991ef849-97a9-4d5d-9af3-de465f9a2c8c": {"doc_hash": "9b1aeb59f41c8d176c8eb1d3f317a3cb0b72842ed5b3b33f9f0f31b9000fafe1", "ref_doc_id": "66940b6f-e079-4d27-8138-4e14c4571c31"}}, "docstore/data": {"4c79f2d6-08e2-4423-973c-b8276de45d4e": {"__data__": {"id_": "4c79f2d6-08e2-4423-973c-b8276de45d4e", "embedding": null, "metadata": {"page_label": "1", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9539df6d-69dc-40e0-8d32-d821a2fce683", "node_type": null, "metadata": {"page_label": "1", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "hash": "3a6788343cc39a613b69b5d0f4516d3e5ff92c815bc97eebec231d8390a269fd"}}, "hash": "1b395c1e21257d3f8f8cfbb221583a9bd05cbd5377ebe18f2157a0f946384751", "text": "L\u00f8sningsforslag \u2013 Eksamenssett 1  (kl. 09:00-13:00) Oppgave 1 - Teori (25%) 1) Hvilket alternativ er IKKE et lag i TCP/IP-stabelen (stack)? Riktig svar: Sammenkoblingslaget (Connection layer)  2) Hvilken form for kanalkoding (channel coding) bruker Internettet? Riktig svar: 16-bit sjekksum (16-bit checksum)  3) Hvilken metode brukes for \u00e5 h\u00e5ndtere duplikater og at pakker kommer i feil rekkef\u00f8lge? Riktig svar: Sequencing (sekvensering)  4) Hva er \"replay error\" i nettverkssammenheng? Riktig svar: At en forsinket pakke fra tidligere sesjon blir akseptert i senere sesjon, og at korrekt pakke dermed blir avvist som duplikat.  5) Hvordan h\u00e5ndteres en \"replay error\" Riktig svar: Pakkene i en sesjon merkes med en unik ID  6) Hva er det som karakteriserer et DoS (Denial-of-Service) angrep? Riktig svar: Angriperen sender enorme mengder pakker til en server slik at den ikke kan betjene legitime foresp\u00f8rsler.  7) Hvor mange bits best\u00e5r en IPv6-adresse av? Riktig svar: 128  8) Hva spesifiserer \u201c1\u201d-ere i en subnett-maske? Riktig svar: Hvilke bits av IP-adressen som utgj\u00f8r prefiks.  9) Hva skjer n\u00e5r en melding krypteres? Riktig svar: Dataene i meldingen endres, slik at kun riktig mottaker kan rekonstruere den opprinnelige meldingen.  10) Hvordan fungerer kryptering med offentlig n\u00f8kkel (public key encryption)? Riktig svar: Hver part f\u00e5r en hemmelig og en offentlig n\u00f8kkel. En melding kryptert med en offentlig n\u00f8kkel, kan kun dekrypteres med den korresponderende private n\u00f8kkelen.  11) Hva var det som var s\u00e5 revolusjonerende med CPU? Riktig svar: CPU gjorde det mulig \u00e5 lagre data i maskinens minne som gir store fordeler med tanke p\u00e5 at programmer kan bli mer komplekse og endres fort kun ved \u00e5 gi nye instruksjoner til minnet.  12) Hva sier Moores lov? Riktig svar: Loven sier at antall transistorer i en integrert krets dobles hvert 2. \u00e5r", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "11759c97-e535-4807-8ab6-da70932d32b4": {"__data__": {"id_": "11759c97-e535-4807-8ab6-da70932d32b4", "embedding": null, "metadata": {"page_label": "2", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90c2cf7b-908b-4b41-8baf-5c7c284e44aa", "node_type": null, "metadata": {"page_label": "2", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "hash": "869ce6aa909e63b8f2c06b698c134d5e0484a284e7d04d704d0044eb9a450f49"}}, "hash": "69feb2cbe4d35d5c8f540146df505072ee73f0cd3a84267e1a54b91b6d9345aa", "text": "13) Hvilke fem steg er med i \u201cFetch/Execute Cycle\u201d? Riktig svar: Instruction Fetch(IF), Instruction Decode(ID), Data Fetch(DF), Instruction Execute(EX) , Result Return(RR)  14) Hvordan fungerer en transistor? Riktig svar: En bryter som det enten kan g\u00e5 str\u00f8m gjennom eller ikke, og som man kan styre ved hjelp av str\u00f8m.  15) CPU kalles ogs\u00e5 Riktig svar: Microprocessor  16) Hvor mange symboler kan representeres med 3 byte? Riktig svar: 16777216  17) Hva er sant om \"run-length-koding\"? Riktig svar: Run-length-koding er tapsl\u00f8s komprimering, dvs. at den originale representasjonen av 0ere og 1ere kan bli rekonstruert perfekt fra den komprimerte versjonen.  18) Extended ASCII (ogs\u00e5 kjent som ISO-8859-1) er Riktig svar: 8 bits kode  19) Hvilket bin\u00e6rt tall representeres av det hexadesimale tallet 39A? Riktig svar: 001110011010  20) Navnet \u201cBob\u201d skrives som \u201c0100 0010 0110 1111 0110 0010\u201d i Extended ASCII. Hvilket alternativ representerer ordet \u201cobo\u201d i Extended ASCII? Riktig svar: 0110 1111 0110 0010 0110 1111 \t Oppgave 2a - Kodeforst\u00e5else (5%) Funksjonen myst har f\u00f8lgende kode: def myst(val1, val2):     if (val1 and val2):         return 1     elif (val1 and not val2):         return 2     elif (not val1 and val2):         return 3     else:         return 4 Hva returneres ved funksjonskallet under? myst(((True and False) or (False and True)), ((False or True) and (not(not True))))   Riktig svar: 3", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1fc21395-d9c8-4334-99a3-df05c1621ef3": {"__data__": {"id_": "1fc21395-d9c8-4334-99a3-df05c1621ef3", "embedding": null, "metadata": {"page_label": "3", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a3ef7c43-088f-4809-b474-504e2056afc4", "node_type": null, "metadata": {"page_label": "3", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "hash": "2175143c3881f615d5cc0713044506d5a07e674986b511ae4dac51740fa86a8d"}}, "hash": "b19915789d7e1fa9429bdb4569fffaa28165685e423e2f471603b0fbf3a04db5", "text": "Oppgave 2b - Kodeforst\u00e5else (5%) Funksjonen sqr skal ta inn en liste (numbers) best\u00e5ende av heltall som parameter. Funksjonen skal endre annethvert heltall i listen (fra og og med andre element) til kvadratet av heltallet (heltallet multiplisert med seg selv). Til slutt skal funksjonen returnere den endrede listen. Gitt funksjonen:  def sqr(numbers):                #KODE 1          numbers[x]=numbers[x]**2              return numbers Eksempel p\u00e5 kall av funksjonen sqr: >>> numbers = sqr([2,4,6,8,10,12]) >>> print(numbers) [2, 16, 6, 64, 10, 144] Hvordan skal linjen med innholdet #KODE1 i koden til sqr se ut for at funksjonen skal fungere p\u00e5 m\u00e5ten beskrevet over ved kj\u00f8ring?   Oppgave 2c - Kodeforst\u00e5else (10%) Funksjonen\tprime_numbers\ter\tment\t\u00e5\treturnere\ten\tliste\tsom\tinneholder\talle\tprimtall,\tdvs.\ttall\tsom\tbare\tkan\tdeles\tmed\tseg\tselv\tog\t1,\ti\tet\tbestemt\tintervall\tangitt\tav\tparametrene\tstart\tog\tstopp.\tAnta\tat\tstartalltid\tvil\tv\u00e6re\tst\u00f8rre\tenn\t0\tog\tmindre\tenn\tstopp.\tGitt\tfunksjonen:\tdef\tprime_numbers(start,\tstop):\t\t\t\t\tprimes\t=\t[]\t\t\t\t\tfor\tnum\tin\trange(start,stop\t+\t1):\t\t\t\t\t\t\t\t\t\t\t\t\tif\tnum\t>\t1:\t\t\t\t\t\t\t\t\t\t\t\t\t\tprime\t=\tTrue\t\t\t\t\t\t\t\t\t\t\t\t\tfor\ti\tin\trange(2,num):\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#KODE1\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprime\t=\tFalse\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak\t\t\t\t\t\t\t\t\t\t\t\t\tif\tprime:\tRiktig svar: for x in range(1,len(numbers),2):", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1d53449b-1c9c-439a-a822-f03aec788fd0": {"__data__": {"id_": "1d53449b-1c9c-439a-a822-f03aec788fd0", "embedding": null, "metadata": {"page_label": "4", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2a7dde48-519c-4ce0-bd42-dbc01d189315", "node_type": null, "metadata": {"page_label": "4", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "hash": "2afa8b173faa9c14a3371d8ee7b455be222621d9b3d4ed0f4e4a699c5acdee78"}}, "hash": "cecb859fe3afe73239f267483879d4fae914c92a6115c6f1a58aa3eb7b65b6e9", "text": "#KODE2\t\t\t\t\treturn\tprimes\tEksempel\tp\u00e5\tkall\tav\tfunksjonen\tprime_numbers:\t>>>\tprimes\t=\tprime_numbers(1,\t16)\t>>>\tprint(primes)\t[2,\t3,\t5,\t7,\t11,\t13]\tHvordan\tskal\tlinjene\tmed\tinnholdet\t#KODE1og\t#KODE2i\tkoden\ttil\tprime_numbers\tse\tut\tfor\tat\tfunksjonen\tskal\tha\tden\ttiltenkte\tvirkem\u00e5ten\tunder\tkj\u00f8ring?\t  Oppgave 2d - Kodeforst\u00e5else (5%) Funksjonen\tpalindrome\ttar\tinn\ten\tstreng\t\tsom\tparameter\tog\thar\ttil\thensikt\t\u00e5\tsjekke\tom\tordet\teller\tuttrykket\trepresentert\ti\tstrengen\tgir\tsamme\tresultat\tenten\tdet\tleses\tfra\th\u00f8yre\teller\tvenstre.\tHvis\tordet\teller\tutrykket\tgir\tsamme\tresultat\tskal\tfunksjonen\treturnere\tTrue.\tHvis\tikke\tskal\tden\treturnere\tFalse.\tFunksjonen\tskal\tkun\treturnere\tTruei\ttilfeller\thvor\ttegnsetting\ti\tstrengen\tblir\thelt\tlik\tuavhengig\tav\thvilken\tvei\tstrengen\tleses.\tDet\tbetyr\tat\tfunksjonskallet\tpalindrome(\"Radar\")vil\treturnere\tFalse\tsiden\tfunksjonen\tskiller\tp\u00e5\tstore\tog\tsm\u00e5\tbokstaver.\t\tGitt\tfunksjonen:\tdef\tpalindrome(s):\t\t\t\t\t#KODE1\tEksempel\tp\u00e5\tkj\u00f8ring\tav\tfunksjonen\tpalindrome:\t>>>\tpalindrome(\"radar\")\tTrue\tHvordan\tskal\tlinjen\tmed\tinnholdet\t#KODE1\t(return-setningen)\ti\tkoden\ttil\tpalindrome\tse\tut\tfor\tat\tfunksjonen\tskal\tfungere\tsom\tbeskrevet\tover\tved\tkj\u00f8ring?\t  Riktig svar:  1) if (num % i) == 0: 2) primes.append(num) \nRiktig svar: return not(bool(s.find(s[::-1])))", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f363d4db-5c51-4614-9500-0b2fe4bcba20": {"__data__": {"id_": "f363d4db-5c51-4614-9500-0b2fe4bcba20", "embedding": null, "metadata": {"page_label": "5", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c459dfbb-05d9-4bd2-9b93-9175236d87cd", "node_type": null, "metadata": {"page_label": "5", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "hash": "6a14bb4d076a3a76c04188db270545d923c96a6213b23b469195ddc7afa5b588"}}, "hash": "2395e8e74b710dcbb4d4c7ce76f580e46cd608c545f3c79987f0434050a142f1", "text": "Oppgave 2e - Kodeforst\u00e5else (5%) Gitt\tfunksjonen:\tdef\tmyst(tall1,tall2,nr):\t\t\t\t\tfor\ti\tin\trange(2,nr):\t\t\t\t\t\t\t\t\tnytt\t=\ttall1\t+\ttall2\t\t\t\t\t\t\t\t\ttall1\t=\ttall2\t\t\t\t\t\t\t\t\ttall2\t=\tnytt\t\t\t\t\treturn\tnytt\tHva\tskrives\tut\tn\u00e5r\tf\u00f8lgende\tkode\tkj\u00f8res?\tprint(myst(0,1,7))\t  Oppgave 2f - Kodeforst\u00e5else (5%) Gitt\tfunksjonen:\tdef\tmyst(x,y):\t\t\t\t\tif\tx%y\t==\t0:\t\t\t\t\t\t\t\t\treturn\ty\t\t\t\t\telse:\t\t\t\t\t\t\t\t\treturn\tmyst(y,x%y)\tHva\tskrives\tut\tn\u00e5r\tf\u00f8lgende\tkode\tkj\u00f8res?\tprint(myst(24,88))\t  Oppgave 3a \u2013 Programmering (5%)  Skriv funksjonen read_file som tar en inn-parameter filename. Denne funksjonen skal lese inn en tekstfil filename, som bekriver resultatene fra \u00e5rets flerkamp-konkurranse. Resultatene er lagret i tekstfilen flerkamp.txt, som ligger i den samme mappen (directory) som du skal lagre python-koden. Resultatene i tekstfilen er p\u00e5 formatet beskrevet over. Funksjonen skal returnere innholdet i tekstfilen i form av \u00e9n lang streng. Dersom filen ikke finnes skal funksjonen skrive ut feilmeldingen \"Kan ikke finne filen flerkamp.txt\" til skjermen, og returnere verdien None. Eksempel p\u00e5 kj\u00f8ring av funksjonen og utskrift av returverdi: >>> resultater = read_file('flerkamp.txt') >>> resultater Riktig svar: 8 \nRiktig svar: 8", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "90f395f5-3786-4c72-adba-96f228badd8d": {"__data__": {"id_": "90f395f5-3786-4c72-adba-96f228badd8d", "embedding": null, "metadata": {"page_label": "6", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d42e765c-9953-42d0-a05f-1ca6aac134aa", "node_type": null, "metadata": {"page_label": "6", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "hash": "73b962ba107f9a2367b549d632e00ecc2fa1749193a7042e73f686915ed3b06a"}, "3": {"node_id": "d982c433-731b-4831-9f27-48d312bfdf48", "node_type": null, "metadata": {"page_label": "6", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "hash": "ae8c56cb75186981ae3d78fb5c3bc62be1952c3ec81b969c6f72921b5db66307"}}, "hash": "4df9d5fe0eab3fa15d595f4d3b0482f2338913526300e5c5ef2e86c9a8278d1a", "text": "'Name,    Poker,  Highjump,  Balloonshooting, SausageEating,  HoldBreath\\nJohn,    8,         1.67,      17,              23,             2:01.65\\nLisa,    12,        1.30,      12,              13,             1:13.02\\nPer,     8,         1.55,      8,               0,              1:51.35\\nNelly,   2,         1.34,      9,               17,             0:31.18\\nNora,    5,         1.87,      13,              5,              2:01.65\\n'  \n  Oppgave 3b \u2013 Programmering (5%)  Skriv funksjonen list_from_string som tar inn strengen txt som inn-parameter. Forutsett at txt har et format tilsvarende \u00e9n enkelt linje i flerkamp.txt, dvs. et sett med verdier (navn og resultat per \u00f8velse) separert med komma og et vilk\u00e5rlig antall mellomrom (whitespace). Funksjonen skal returnere en liste med strenger som beskriver de enkelte verdiene. Eventuelle mellomrom, linjeskift eller tabulatorer (whitespace) i strengen m\u00e5 fjernes fra hvert element i listen f\u00f8r listen returneres.   Eksempel p\u00e5 bruk: >>> list_from_string(\"Lisa,  12,   1.30,   12,    13,  1:13.02\\n\") ['Lisa', '12', '1.30', '12', '13', '1:13.02']    Oppgave 3c \u2013 Programmering (5%)  Skriv funksjonen make_result_list som tar inn strengen returnert av funksjonen read_file (Oppgave 3a) som inn-parameter. Funksjonen make_result_list skal returnere en to-dimensjonal liste der hvert listeelement er en liste som innholder verdiene fra hver linje i filenflerkamp.txt. Bruk gjerne funksjonen list_from_string (Oppgave 3b) i l\u00f8sningen din.  Eksempel p\u00e5 bruk: # Oppgave 3A: 5% def read_file(file):      # First we need to check if the filename exists. If not, ask for a new name.     try:         open_file=open(file, 'r') # Read only mode         textResults = open_file.read()         open_file.close() # Closing to save memory     except IOError: # No such file.          print(\"'\"+file+\"' could not be found.\")", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d982c433-731b-4831-9f27-48d312bfdf48": {"__data__": {"id_": "d982c433-731b-4831-9f27-48d312bfdf48", "embedding": null, "metadata": {"page_label": "6", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d42e765c-9953-42d0-a05f-1ca6aac134aa", "node_type": null, "metadata": {"page_label": "6", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "hash": "73b962ba107f9a2367b549d632e00ecc2fa1749193a7042e73f686915ed3b06a"}, "2": {"node_id": "90f395f5-3786-4c72-adba-96f228badd8d", "node_type": null, "metadata": {"page_label": "6", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "hash": "4df9d5fe0eab3fa15d595f4d3b0482f2338913526300e5c5ef2e86c9a8278d1a"}}, "hash": "ae8c56cb75186981ae3d78fb5c3bc62be1952c3ec81b969c6f72921b5db66307", "text": "return                  #    print('fil:',textResults)     return textResults \n# Oppgave 3B: 5% def list_from_string(streng):     liste = streng.split(\",\")     for i in range(len(liste)):         liste[i] = liste[i].strip() #    print('liste:',liste)     return liste", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fe2ea077-cbfc-4604-926e-bd3f7c13ed3b": {"__data__": {"id_": "fe2ea077-cbfc-4604-926e-bd3f7c13ed3b", "embedding": null, "metadata": {"page_label": "7", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ffdd34a6-32a1-4f1b-a616-7934e94fabc5", "node_type": null, "metadata": {"page_label": "7", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "hash": "a263a9dd4af4acfd8808b0f8980baf6356ff7874f577b6ba9c305aeae5501226"}}, "hash": "780ecb90fa8eca3451adb366bcfe401590591a7e094e49d633f6dba1c47c915e", "text": ">>> string = read_file('flerkamp.txt') >>> string 'Name,    Poker,  Highjump,  Balloonshooting, SausageEating,  HoldBreath\\nJohn,    8,         1.67,      17,              23,             2:01.65\\nLisa,    12,        1.30,      12,              13,             1:13.02\\nPer,     8,         1.55,      8,               0,              1:51.35\\nNelly,   2,         1.34,      9,               17,             0:31.18\\nNora,    5,         1.87,      13,              5,              2:01.65' >>> results = make_result_list(string) >>> results [['Name', 'Poker', 'Highjump', 'Balloonshooting', 'SausageEating', 'HoldBreath'], ['John', '8', '1.67', '17', '23', '2:01.65'], ['Lisa', '12', '1.30', '12', '13', '1:13.02'], ['Per', '8', '1.55', '8', '0', '1:51.35'], ['Nelly', '2', '1.34', '9', '17', '0:31.18'], ['Nora', '5', '1.87', '13', '5', '2:01.65']]   Oppgave 3d \u2013 Programmering (6%) Skriv funksjonen time_to_seconds som tar strengen time som inn-parameter. Strengen angir en deltakers sluttid i en \u00f8velse (f.eks. holde pusten lengst mulig) og vil ha f\u00f8lgende format: min:sek.hundredeler. Funksjonen skal gj\u00f8re om strengen til et flyttall med formatet sekunder.hundredeler og returnere dette flyttallet.  Eksempel p\u00e5 bruk: >>> time_to_seconds('2:01.65') 121.65 >>> print(type(time_to_seconds('2:21.65'))) <class 'float'> \n   # Oppgave 3C: 5% def make_result_list(string):     print()     my_list = []     in_list = string.split(\"\\n\")      for line in in_list:         my_list.append(list_from_string(line))     return my_list \n# Oppgave 3D: 6% # In: a string with current format: minutes:seconds.hundrethsofseconds # out: seconds.hundreds (as float) def time_to_seconds(time):     minute = int(time.split(':')[0])     sec = int(time.split(':')[1].split('.')[0])     hs = time.split(':')[1].split('.')[1]     return float(str(str(minute*60+sec)+'.'+hs))", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "433d702b-97d7-4e19-bc0f-f99978e8a894": {"__data__": {"id_": "433d702b-97d7-4e19-bc0f-f99978e8a894", "embedding": null, "metadata": {"page_label": "8", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "49673bce-884e-4e81-b6cf-b8ebe98b8dea", "node_type": null, "metadata": {"page_label": "8", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "hash": "bb215111fdf68a3bc017afb6f7a6f060d545d4484cd56ee62fc21269155043e2"}, "3": {"node_id": "7a4c9fdc-6958-4510-b94d-3eff9c102baf", "node_type": null, "metadata": {"page_label": "8", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "hash": "3af7b6e9a246594b52e2e1bc1f19271e64f7efd30391f8b4ed998fbea28c0452"}}, "hash": "8e358efc2100ff3350ddb26ed30d470a6f1ad4f1aec510c14cb2508383283cce", "text": "Oppgave 3e \u2013 Programmering (9%)  Skriv funksjonen str_to_numbers som tar inn results, en to-dimensjonal liste, som parameter. Funksjonen skal kunne ta inn den to-dimensjonale listen som returneres fra funksjonen make_result_list (Oppgave 3c) og gj\u00f8re om tall p\u00e5 strengformat til heltall eller flyttall. Hvis et element har formatet \u20182:23.56\u2019 skal disse gj\u00f8res om til antall sekunder og antall hundredeler (alts\u00e5 her 143.56 som flyttall). Hvis elementet har formatet '1.3' skal det gj\u00f8res om til et flyttall, mens hvis strengen bare inneholder et tall som '12' skal den gj\u00f8res om til et heltall. Funksjonen str_to_numbers skal returnere den formaterte (to-dimensjonale) listen. Eksempel p\u00e5 bruk: >>> # results inneholder resultatet fra oppgave 3c, og den har f\u00f8lgende format: >>> results # Dette er formatet fra oppgave 3c [['Name', 'Poker', 'Highjump', 'Balloonshooting', 'SausageEating', 'HoldBreath'], ['John', '8', '1.67', '17', '23', '2:01.65'], ['Lisa', '12', '1.30', '12', '13', '1:13.02'], ['Per', '8', '1.55', '8', '0', '1:51.35'], ['Nelly', '2', '1.34', '9', '17', '0:31.18'], ['Nora', '5', '1.87', '13', '5', '2:01.65']] >>> results = str_to_number(results) >>> results # Dette er results fra oppgave 3e [['Name', 'Poker', 'Highjump', 'Balloonshooting', 'SausageEating', 'HoldBreath'],  ['John', 8, 1.67, 17, 23, 121.65], ['Lisa', 12, 1.3, 12, 13, 73.02], ['Per', 8, 1.55, 8, 0, 111.35], ['Nelly', 2, 1.34, 9, 17, 31.18],  ['Nora', 5, 1.87, 13, 5, 121.65]] \n  Oppgave 3f \u2013 Programmering (9%)  Skriv funksjonen find_data, som har input-parametrene event, name og results. Parametrene inneholder, i den rekkef\u00f8lgen, en \u00f8velse, deltagerens navn og resultatlisten for en fullstendig flerkamps-konkurranse. Denne listen er formattert slik som den returneres fra funksjonenstr_to_numbers (i oppgave 3e). Navnet p\u00e5 \u00f8velsene og deltagerne er i ukjent rekkef\u00f8lge. # Oppgave 3E: 9% def str_to_numbers(liste):     for row in range(len(liste)):                  # If the element has both ':' and '.', we need to secondify it.         for item in range(len(liste[row])):             if (liste[row][item].find(\":\") != -1): #                print(liste[row][item])                 liste[row][item] = time_to_seconds(liste[row][item])             # If it is only has a '.', it is a float.             elif (liste[row][item].find(\".\")", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7a4c9fdc-6958-4510-b94d-3eff9c102baf": {"__data__": {"id_": "7a4c9fdc-6958-4510-b94d-3eff9c102baf", "embedding": null, "metadata": {"page_label": "8", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "49673bce-884e-4e81-b6cf-b8ebe98b8dea", "node_type": null, "metadata": {"page_label": "8", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "hash": "bb215111fdf68a3bc017afb6f7a6f060d545d4484cd56ee62fc21269155043e2"}, "2": {"node_id": "433d702b-97d7-4e19-bc0f-f99978e8a894", "node_type": null, "metadata": {"page_label": "8", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "hash": "8e358efc2100ff3350ddb26ed30d470a6f1ad4f1aec510c14cb2508383283cce"}}, "hash": "3af7b6e9a246594b52e2e1bc1f19271e64f7efd30391f8b4ed998fbea28c0452", "text": "elif (liste[row][item].find(\".\") != -1) :                 liste[row][item] = float(liste[row][item])             # If all chars in the element is a digit, we intify it.             elif liste[row][item].isdigit():                 liste[row][item] = int(liste[row][item])     return liste", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4246b198-dbce-4f3b-83df-97bec98d3035": {"__data__": {"id_": "4246b198-dbce-4f3b-83df-97bec98d3035", "embedding": null, "metadata": {"page_label": "9", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d374da11-0da2-44d2-8085-eb17e9dbad26", "node_type": null, "metadata": {"page_label": "9", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "hash": "99dfdea058349d06e3abc8f2d74992c7a1de415ae6ca54cdacc939180e566ec1"}}, "hash": "b737e339f2889edf317a974f320484250630ba77c515724956a78371454f2bda", "text": "Funksjonen skal bruke listen til \u00e5 finne resultatet for en deltager i den oppgitte \u00f8velsen, og returnere denne verdien. I eksempelet under er det vist hvordan resultatet (returverdien fra str_to_numbers) ser ut f\u00f8r find_data blir kj\u00f8rt: >>> results [['Name', 'Poker', 'Highjump', 'Balloonshooting', 'SausageEating', 'HoldBreath'], ['John', 8, 1.67, 17, 23, 121.65], ['Lisa', 12, 1.3, 12, 13, 73.02], ['Per', 8, 1.55, 8, 0, 111.35], ['Nelly', 2, 1.34, 9, 17, 31.18], ['Nora', 5, 1.87, 13, 5, 121.65]] >>> find_data('SausageEating','John',results) 23   Oppgave 3g \u2013 Programmering (5%) Skriv funksjonen event_results som tar inn-parametrene event og results. Parameteren event er en streng som angir \u00e9n bestemt \u00f8velse (f.eks. Poker), mens results vil v\u00e6re datastrukturen som returneres av funksjonen str_to_numbers (Oppgave 3e). Funksjonen event_results skal returnere en to-dimensonal liste, slik som i eksemplet nedenfor. Listen skal v\u00e6re sortert etter resultat slik at vinneren av den angitte \u00f8velsen og hans/hennes resultat skal kommer f\u00f8rst i listen, mens taperen og hans/hennes resultat kommer sist. Du m\u00e5 gjerne bruke den eksisterende funksjonen sort_list hvis du \u00f8nsker det. Den st\u00e5r beskrevet i starten av oppgave 3, men oppsummert sorterer den en todimensjonal liste list p\u00e5 elementnummer elem: >>> sort_list([['John', 8], ['Lisa', 12], ['Per', 8]],1) [['Lisa', 12], ['John', 8], ['Per', 8]] >>> results # Fra oppgave 3e [['Name', 'Poker', 'Highjump', 'Balloonshooting', 'SausageEating', 'HoldBreath'], ['John', 8, 1.67, 17, 23, 121.65], ['Lisa', 12, 1.3, 12, 13, 73.02], ['Per', 8, 1.55, 8, 0, 111.35], ['Nelly', 2, 1.34, 9, 17, 31.18], ['Nora', 5, 1.87, 13, 5, 121.65]] >>> event_results('Poker',results) [['Lisa', 12], ['John', 8], ['Per', 8], ['Nora', 5], ['Nelly', 2] # Oppgave 3F: 5% # The first row (0) contains names of events. If we get the correct column # we can then traverse each line in search of the correct name. def find_data(navn, event, results):     column = results[0].index(navn)     for i in results:         if i[0] == event:             return i[column]", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "145bcca7-c729-4248-bc01-3104d8b83c2d": {"__data__": {"id_": "145bcca7-c729-4248-bc01-3104d8b83c2d", "embedding": null, "metadata": {"page_label": "10", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3f77a63f-7c98-4874-89e2-ffac60190ee1", "node_type": null, "metadata": {"page_label": "10", "file_name": "TDT4110_H2018_E1_LF.pdf"}, "hash": "6a48cf76680f738332728c5447989182f2ace1ec3a06e25ab70f6676ba4af5a2"}}, "hash": "4e7c9571ec133795a6405272cb3eb8da3dce4ad3d37d12fba012949cf0289e6b", "text": "Hjelpefunksjon:  Flerkamp.txt:  # Oppgave 3G: 5% # Sorts one event based on results, lower value higher # return a list of lists, with [name, value]. def event_results(event, results):     column = results[0].index(event)     event_result = []     for person in results[1:]: # Skip the first, as that's the header         event_result.append([person[0],person[column]])             # Now for the sorting, using the specified function sort_list     return sort_list(event_result,1) \nName,    Poker,  Highjump,  Balloonshooting, SausageEating,  HoldBreath John,    8,         1.67,      17,              23,             2:01.65 Lisa,    12,        1.30,      12,              13,             1:13.02 Per,     8,         1.55,      8,               0,              1:51.35 Nelly,   2,         1.34,      9,               17,             0:31.18 Nora,    5,         1.87,      13,              5,              2:01.65 # Helper function: sorts a list of lists based on its second value # Will be specified at the exam. Values sorted lowest first, increasing def sort_list(liste,column):     return sorted(liste,key=lambda l:l[column], reverse=True)", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "61ffa5cc-da53-40a4-b368-b53405304947": {"__data__": {"id_": "61ffa5cc-da53-40a4-b368-b53405304947", "embedding": null, "metadata": {"page_label": "1", "file_name": "TDT4110_kont_2019_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "155b3a0d-8a36-41b1-a44e-25f00d03e054", "node_type": null, "metadata": {"page_label": "1", "file_name": "TDT4110_kont_2019_LF.pdf"}, "hash": "18e6afd99c85f7deff764dd6549b9c54d5d4f033d65cc6ca98dc71e7e99e2caa"}}, "hash": "18e6afd99c85f7deff764dd6549b9c54d5d4f033d65cc6ca98dc71e7e99e2caa", "text": "L\u00f8sningsforslag, Konteeksamen august 2019, TDT4110 Oppgave 1 - Teori Hva st\u00e5r random i RAM for?At alle adresser kan hentes direkteHva er det som benyttes i dag som har erstattet vacuum tubes (vakuumr\u00f8r)?TransistorerHvorfor er det \u00f8nskelig \u00e5 bruke SSD fremfor en vanlig harddisk?I en SSD lagres data i elektroniske kretser . Det er ingen bevegelige deler, og dermed blir disken raskere og mer p\u00e5litelig.Hva er et operativsystem?Grunnleggende operasjoner som er n\u00f8dvendig for \u00e5 kunne bruke maskinen effektivt, men som ikke er bygd inn i maskinvaren.Hva er pipelining?En teknikk der en CPU kan utf\u00f8re \ufb02ere instruksjoner parallelt.Hva skjer om samplingsfrekvensen er for treg?Lydb\u00f8lger kan forekomme mellom samplene, og man kan miste viktige segmenter av lydenHvilken av f\u00f8lgende komprimeringer er loss-less?Run-length kodingHvor mange symboler kan representeres med 6 bit?64Hvor mange bytes bruker UNICODE i \"worst-case\"?4Hva er latencytiden det tar for informasjon \u00e5 bli laget eller levert.Hva er unicastEn type adressering der en enkelt datamaskin i nettverket blir identi\ufb01sert og mottar pakken.Hva er en protokoll i nettverks-sammenheng?En protokoll beskriver prosedyrer for feilh\u00e5ndtering og uventede hendelser .Hvilken metode av \ufb02ytkontroll er mest effektiv?Sliding window", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a0496fd0-48e4-4ec6-a8ae-a1c95ce680a0": {"__data__": {"id_": "a0496fd0-48e4-4ec6-a8ae-a1c95ce680a0", "embedding": null, "metadata": {"page_label": "2", "file_name": "TDT4110_kont_2019_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d343b895-32da-401e-89a6-0d30e1f0af09", "node_type": null, "metadata": {"page_label": "2", "file_name": "TDT4110_kont_2019_LF.pdf"}, "hash": "15ce9a5f4758f1ccc58449f7c56ef303f3190fa6b0407bc2406923e87eb7e3b0"}}, "hash": "15ce9a5f4758f1ccc58449f7c56ef303f3190fa6b0407bc2406923e87eb7e3b0", "text": "Oppgave 2 - kodeforst\u00e5else 2a\t32 2b\teksamen 2c\t4 2d\t35 2e\t21 2f\ttekst = list(tekst) \t tekst[6:6] = 'gh' \t tekst = ''.join(tekst) Hva er sant om transportlaget i TCP/IP?Transportlaget s\u00f8rger for at all data blir levert slik den ble sendt; komplett og i riktig rekkef\u00f8lge.Hva er sant om syklisk sjekksum (Cyclic Redundancy Codes)?Syklisk sjekksum brukes i h\u00f8yhastighetsnettverk fordi den godtar en melding med fast lengde og er ekstremt god til feildetektering.Hva er phishing\u00c5 opptre som en kjent nettside (f.eks. nettbank) for \u00e5 f\u00e5 tak i personlig informasjon som f.eks. aksesskoder, kontonummer, etc.Hvordan kan man best sikre at data som kommer fram er identisk med de som ble sendt  (sikre dataintegritet)?Bruke hashingHvilken hensikt har brannmurer (\ufb01rewalls)?De er ment til \u00e5 beskytte nettsteds-integriteten.Hvordan fungerer kryptering med privat n\u00f8kkel (i motsetning til kryptering med  offentlig n\u00f8kkel)?Partene deler en hemmelig n\u00f8kkel som brukes b\u00e5de for kryptering og dekryptering.Hva st\u00e5r VPN forVirtual private network", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "98945ea1-8cbe-4ced-b962-f28df1fb5edf": {"__data__": {"id_": "98945ea1-8cbe-4ced-b962-f28df1fb5edf", "embedding": null, "metadata": {"page_label": "3", "file_name": "TDT4110_kont_2019_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e113910c-f9ff-42ae-98f9-d321ac79ffdb", "node_type": null, "metadata": {"page_label": "3", "file_name": "TDT4110_kont_2019_LF.pdf"}, "hash": "836fadd17068656b4803669242a611589c75184521be0606db4d49cae721d777"}}, "hash": "446b2826313ceebbf1f5af04076474ee05a9b23b6044cd3b1994ff7a94950572", "text": "Oppgave 3 - Programmering L\u00f8sningene som er vist er bare en av m\u00e5tene \u00e5 programmere dette p\u00e5. Alle programmeringsoppgaver kan l\u00f8ses p\u00e5 mange m\u00e5ter, s\u00e5 dette er bare forslag til kode som fungerer, og ikke fasit i den forstand at det er eneste m\u00e5te \u00e5 l\u00f8se oppgavene p\u00e5. Oppgave 3-1 Lesing fra \ufb01l: read_\ufb01le(\ufb01lename)   Oppgave 3-2 Lag et sett med ingredienser: \ufb01x_ingredients(string)  Oppgave 3-3: gj\u00f8r om liste til dictionary: make_dict(foodlist)  \ndef read_file(filename):     fil = open(filename,'r')     liste = fil.readlines()     fil.close()     return liste\ndef fix_ingredients(streng):     return streng.strip().split(', ')\ndef make_dict(foodlist):     dikt = {}     for line in foodlist:         name, ingredients = line.strip().split(\":\")         dikt[name] = fix_ingredients(ingredients)     return dikt", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a30783d1-ac75-476a-bfd8-359b9afcc263": {"__data__": {"id_": "a30783d1-ac75-476a-bfd8-359b9afcc263", "embedding": null, "metadata": {"page_label": "4", "file_name": "TDT4110_kont_2019_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3c0abe99-189d-445b-8fd4-1ec751bb9936", "node_type": null, "metadata": {"page_label": "4", "file_name": "TDT4110_kont_2019_LF.pdf"}, "hash": "d6f563190a8fa243a8fe20fc2b2cbff7dffc4508327b1f3a00104d5d3f3a57e7"}}, "hash": "2f34c9e1c5a03b29480341fd608306976cd1b68c47b5db24f5c948ba2e1d734d", "text": "Oppgave 3-4: Skriv oppsummering og ingredienser for \u00e9n spesi\ufb01kk rett: print_recipe()  Her er det brukt try ...except. Det kan ogs\u00e5 l\u00f8ses uten bruk av dette (se lenger nede)  def print_recipe(food_dict,rett):     try:         liste = food_dict[rett]         antall = len(liste)         print(rett,'has',antall,'ingredients:',', '.join(liste))     except:         print('No dish called',rett)\ndef print_recipe(food_dict, dish):     ingredients = food_dict.get(dish,[]) #verdi settes til [] hvis retten ikke finnes     if ingredients == []:         print('No dish called',dish)     # Now we know that there's a recipe:     else:         # f-strings will be part of the course from now on.         print(f\"{dish} has {len(ingredients)} ingredients: {', '.join(ingredients)}.\")", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5edfa158-14bd-4f9f-942f-d1c6d17f1515": {"__data__": {"id_": "5edfa158-14bd-4f9f-942f-d1c6d17f1515", "embedding": null, "metadata": {"page_label": "5", "file_name": "TDT4110_kont_2019_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "babed95f-2ea7-450a-bd0a-d6886146902e", "node_type": null, "metadata": {"page_label": "5", "file_name": "TDT4110_kont_2019_LF.pdf"}, "hash": "a67b35e8f6d6df2afdc155401b38da86e1aa730ab0aeb5b03f671e7c4bbb2167"}}, "hash": "17533bf302c7203c8103892819bbb93e8d2d8da84baec64de1b8c8b6c957d09d", "text": "Oppgave 3-5: Sorter retter etter ingredienser: all_recipes_with(food)  Her er det brukt mengder for \u00e5 ekskludere duplikater i listen. En mengde inneholder ikke duplikater, noe en liste kan gj\u00f8re. Alternativ l\u00f8sning nederst p\u00e5 siden. \n \ndef all_recipes_with(food):     nyDict = {}     mengde = set()     verdiListe = food.values()     for liste in verdiListe:         mengde = mengde.union(set(liste))     for x in mengde:         nyDict[x] = []         for a in food.keys():             if x in food[a] :                 nyDict[x] += [a]     return nyDict", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "802f4e3a-9389-4f1a-8f7c-ee1a89fc86c2": {"__data__": {"id_": "802f4e3a-9389-4f1a-8f7c-ee1a89fc86c2", "embedding": null, "metadata": {"page_label": "6", "file_name": "TDT4110_kont_2019_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "861c2cf9-d899-42f6-8e16-9430fae8e912", "node_type": null, "metadata": {"page_label": "6", "file_name": "TDT4110_kont_2019_LF.pdf"}, "hash": "94a144066063ca2018e6722476ff80e5b19cae55e2ce596a01b819f47ba8e136"}}, "hash": "32608190aa0773fd2bbc63aa059a1be228d0e1ef7f64e7a5c2fcf165b2f715f0", "text": "Oppgave 6: Velg en tilfeldig matrett med en ingrediens og skriv den ut p\u00e5 en \ufb01n m\u00e5te Her trenger du ikke skrive noen ny funksjon, men bare s\u00f8rge for at de funksjonene du har skrevet tidligere blir kalt p\u00e5 riktig m\u00e5te. Et forslag til l\u00f8sning: import random innhold = read_file('food.txt') food_dict = make_dict(innhold) recipe_dishes = all_recipes_with(food_dict) liste = recipe_dishes['egg'] verdi = random.choice(liste) print(\"Today you'll be eating\",verdi) print_recipe(food_dict,verdi) Her importeres f\u00f8rst random (for \u00e5 kunne bruke random-funksjoner til \u00e5 plukke ut en tilfeldig rett). S\u00e5 hentes recipe_dishes for \u00e5 kunne lage en liste over retter som inneholder 'egg'. Deretter hentes en tilfeldig rett fra denne listen (verdi = random.choice(liste) ). I den siste linjen kalles s\u00e5 print_recipe(food_dict,verdi) for \u00e5 skrive ut hvor mange ingredienser den valgte retten har.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "991ef849-97a9-4d5d-9af3-de465f9a2c8c": {"__data__": {"id_": "991ef849-97a9-4d5d-9af3-de465f9a2c8c", "embedding": null, "metadata": {"page_label": "7", "file_name": "TDT4110_kont_2019_LF.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "66940b6f-e079-4d27-8138-4e14c4571c31", "node_type": null, "metadata": {"page_label": "7", "file_name": "TDT4110_kont_2019_LF.pdf"}, "hash": "9b1aeb59f41c8d176c8eb1d3f317a3cb0b72842ed5b3b33f9f0f31b9000fafe1"}}, "hash": "9b1aeb59f41c8d176c8eb1d3f317a3cb0b72842ed5b3b33f9f0f31b9000fafe1", "text": "Oppgave 7: Beregn bokstavverdien\u00a0til en matrett: value_food(food) Her har jeg valgt \u00e5 lage 2 nye funksjoner. Den ene (value_food(food) ) tar inne en dictionary . Denne g\u00e5r gjennom denne dictionaryen og kaller funksjonen beregn_verdi(liste) med verdien til hver n\u00f8kkel i dictionaryen for \u00e5 regne ute summen av bokstavene i hver rett. \ndef beregn_verdi(liste):     vokaler = 'aeiouy\u00e6\u00f8\u00e5'     summ = 0     for element in liste:         for bokstav in element:             if bokstav in vokaler:                 summ += 5             else:                 summ += 1     return summ def value_food(food):     maks = 0     for key in food.keys():         verdi = beregn_verdi(food[key])         if verdi > maks:             maks = verdi             mat = key     print(mat, maks)", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"9539df6d-69dc-40e0-8d32-d821a2fce683": {"node_ids": ["4c79f2d6-08e2-4423-973c-b8276de45d4e"], "metadata": {"page_label": "1", "file_name": "TDT4110_H2018_E1_LF.pdf"}}, "90c2cf7b-908b-4b41-8baf-5c7c284e44aa": {"node_ids": ["11759c97-e535-4807-8ab6-da70932d32b4"], "metadata": {"page_label": "2", "file_name": "TDT4110_H2018_E1_LF.pdf"}}, "a3ef7c43-088f-4809-b474-504e2056afc4": {"node_ids": ["1fc21395-d9c8-4334-99a3-df05c1621ef3"], "metadata": {"page_label": "3", "file_name": "TDT4110_H2018_E1_LF.pdf"}}, "2a7dde48-519c-4ce0-bd42-dbc01d189315": {"node_ids": ["1d53449b-1c9c-439a-a822-f03aec788fd0"], "metadata": {"page_label": "4", "file_name": "TDT4110_H2018_E1_LF.pdf"}}, "c459dfbb-05d9-4bd2-9b93-9175236d87cd": {"node_ids": ["f363d4db-5c51-4614-9500-0b2fe4bcba20"], "metadata": {"page_label": "5", "file_name": "TDT4110_H2018_E1_LF.pdf"}}, "d42e765c-9953-42d0-a05f-1ca6aac134aa": {"node_ids": ["90f395f5-3786-4c72-adba-96f228badd8d", "d982c433-731b-4831-9f27-48d312bfdf48"], "metadata": {"page_label": "6", "file_name": "TDT4110_H2018_E1_LF.pdf"}}, "ffdd34a6-32a1-4f1b-a616-7934e94fabc5": {"node_ids": ["fe2ea077-cbfc-4604-926e-bd3f7c13ed3b"], "metadata": {"page_label": "7", "file_name": "TDT4110_H2018_E1_LF.pdf"}}, "49673bce-884e-4e81-b6cf-b8ebe98b8dea": {"node_ids": ["433d702b-97d7-4e19-bc0f-f99978e8a894", "7a4c9fdc-6958-4510-b94d-3eff9c102baf"], "metadata": {"page_label": "8", "file_name": "TDT4110_H2018_E1_LF.pdf"}}, "d374da11-0da2-44d2-8085-eb17e9dbad26": {"node_ids": ["4246b198-dbce-4f3b-83df-97bec98d3035"], "metadata": {"page_label": "9", "file_name": "TDT4110_H2018_E1_LF.pdf"}}, "3f77a63f-7c98-4874-89e2-ffac60190ee1": {"node_ids": ["145bcca7-c729-4248-bc01-3104d8b83c2d"], "metadata": {"page_label": "10", "file_name": "TDT4110_H2018_E1_LF.pdf"}}, "155b3a0d-8a36-41b1-a44e-25f00d03e054": {"node_ids": ["61ffa5cc-da53-40a4-b368-b53405304947"], "metadata": {"page_label": "1", "file_name": "TDT4110_kont_2019_LF.pdf"}}, "d343b895-32da-401e-89a6-0d30e1f0af09": {"node_ids": ["a0496fd0-48e4-4ec6-a8ae-a1c95ce680a0"], "metadata": {"page_label": "2", "file_name": "TDT4110_kont_2019_LF.pdf"}}, "e113910c-f9ff-42ae-98f9-d321ac79ffdb": {"node_ids": ["98945ea1-8cbe-4ced-b962-f28df1fb5edf"], "metadata": {"page_label": "3", "file_name": "TDT4110_kont_2019_LF.pdf"}}, "3c0abe99-189d-445b-8fd4-1ec751bb9936": {"node_ids": ["a30783d1-ac75-476a-bfd8-359b9afcc263"], "metadata": {"page_label": "4", "file_name": "TDT4110_kont_2019_LF.pdf"}}, "babed95f-2ea7-450a-bd0a-d6886146902e": {"node_ids": ["5edfa158-14bd-4f9f-942f-d1c6d17f1515"], "metadata": {"page_label": "5", "file_name": "TDT4110_kont_2019_LF.pdf"}}, "861c2cf9-d899-42f6-8e16-9430fae8e912": {"node_ids": ["802f4e3a-9389-4f1a-8f7c-ee1a89fc86c2"], "metadata": {"page_label": "6", "file_name": "TDT4110_kont_2019_LF.pdf"}}, "66940b6f-e079-4d27-8138-4e14c4571c31": {"node_ids": ["991ef849-97a9-4d5d-9af3-de465f9a2c8c"], "metadata": {"page_label": "7", "file_name": "TDT4110_kont_2019_LF.pdf"}}}}